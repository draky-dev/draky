#!/usr/bin/env bash

CONTAINER_NAME=draky
IMAGE_NAME=$TEMPLATE_DRAKY_NAME
DRAKY_VERSION=$TEMPLATE_DRAKY_VERSION
PROJECT_CONFIG_DIR=.draky
CORE_GLOBAL_CONFIG_PATH=/global-config
DOCKER_SOCKET=/var/run/docker.sock

DRAKY_HOST_UID="${UID}"
DRAKY_HOST_GID="$(id -g)"
DRAKY_GID="$(getent group "$(ls -ld $DOCKER_SOCKET | awk '{print $4}')" | cut -d: -f3)"

COLOR_RESET='\033[0m'
#COLOR_BLUE='\033[0;94m'
#COLOR_GREEN='\033[0;92m'
#COLOR_WHITE='\033[0;97m'
COLOR_RED='\033[0;91m'

DRAKY_HOST_IP=$(docker network inspect bridge -f '{{range .IPAM.Config}}{{.Gateway}}{{end}}')

find_project_config_path() {
  if [ "$PWD" = / ]; then
    false
  elif [[ "$PWD" =~ ^/home/[a-z0-9_\$-]+$ ]]; then
    # Don't let search for project configuration in the home directory as we have global configuration there.
    false
  elif [ -d "$1" ]; then
    printf '%s\n' "${PWD%/}/$1"
  else
    (cd .. && find_project_config_path "$1")
  fi
}

HOST_GLOBAL_CONFIG_PATH="$HOME/.draky"

# Make sure that HOST_GLOBAL_CONFIG_PATH exists.
if [ ! -d "$HOST_GLOBAL_CONFIG_PATH" ]; then
  mkdir "$HOST_GLOBAL_CONFIG_PATH"
fi

start_core() {
  if ! docker container inspect ${CONTAINER_NAME} &> /dev/null; then

    local ARGS=(
      --name "$CONTAINER_NAME"
      --group-add="$DRAKY_GID"
      -v /var/run/docker.sock:/var/run/docker.sock
      -v "$HOST_GLOBAL_CONFIG_PATH:$CORE_GLOBAL_CONFIG_PATH"
      -e "DRAKY_VERSION=$DRAKY_VERSION"
      -e "DRAKY_GLOBAL_CONFIG_ROOT=$CORE_GLOBAL_CONFIG_PATH"
      -e "DRAKY_HOST_UID=$DRAKY_HOST_UID"
      -e "DRAKY_HOST_GID=$DRAKY_HOST_GID"
      -e "DRAKY_HOST_IP=$DRAKY_HOST_IP"
    )

    if [[ "$PROJECT_CONFIG_PATH" ]]; then
      ARGS+=(
        -v "$PROJECT_CONFIG_PATH:$PROJECT_CONFIG_PATH"
        -e "DRAKY_PROJECT_CONFIG_ROOT=$PROJECT_CONFIG_PATH"
        -e "DRAKY_PROJECT_ROOT=$PROJECT_ROOT"
      )
    fi

    if [[ $DRAKY_MOUNT_CORE ]]; then
        ARGS+=(-v "$DRAKY_MOUNT_CORE:/opt/dk-core")
    fi

    docker create "${ARGS[@]}" "${IMAGE_NAME}:${DRAKY_VERSION}" > /dev/null
    echo "draky core is live."
  fi

  if ! docker top "${CONTAINER_NAME}" &> /dev/null; then
    docker start ${CONTAINER_NAME} > /dev/null
  fi
}

destroy_core() {
  if docker container inspect ${CONTAINER_NAME} &> /dev/null; then
    docker rm -f -v "$CONTAINER_NAME" > /dev/null
    echo "draky core has been turned off."
  else
    echo "draky core is turned off."
  fi
}

execute_core() {
  start_core

  local ARGS=(
    -i
    --user="$DRAKY_HOST_UID:$DRAKY_HOST_GID"
    # This is required otherwise COLUMNS will be empty here, as this value is not inherited.
    -e "COLUMNS=$(tput cols)"
  )

  # If we are not sending anything through stdin, we can allocate a pseudo-tty.
  if [ -t 0 ]; then
    ARGS+=(-t)
  fi

  local CURRENT_CONFIG_PATH
  # We attach /dev/null to stdin just so it won't get used up, and will be still available for the main "exec" command.
  CURRENT_CONFIG_PATH="$(docker exec --user="$DRAKY_HOST_UID:$DRAKY_HOST_GID" "${CONTAINER_NAME}" dk-core core __internal get-project-path < /dev/null)"

  if [[ "$PROJECT_CONFIG_PATH" != "$CURRENT_CONFIG_PATH" ]]; then
    echo "Leaving the context: '${CURRENT_CONFIG_PATH:-None}'."
    destroy_core
    echo "Entering the context: '${PROJECT_CONFIG_PATH:-None}'."
    start_core
  fi

  docker exec "${ARGS[@]}" "${CONTAINER_NAME}" dk-core "$@" < /dev/stdin
  exit "$?"
}

init_environment() {
    destroy_core
    mkdir -p "$PROJECT_CONFIG_DIR"
    PROJECT_CONFIG_PATH="$PWD/$PROJECT_CONFIG_DIR"
    PROJECT_ROOT="$PROJECT_CONFIG_PATH/.."
    execute_core "$@"
}

PROJECT_CONFIG_PATH="$(find_project_config_path "$PROJECT_CONFIG_DIR")"

if [ "$1" == "env" ] && [ "$2" == "init" ]; then
  if [ -n "$PROJECT_CONFIG_PATH" ]; then
    echo -e "$COLOR_RED\"$PROJECT_CONFIG_DIR\" directory already exists in the project. Delete it if you want to initialize the environment again.$COLOR_RESET"
    exit 1
  fi
  init_environment "$@"
fi

PROJECT_ROOT="$PROJECT_CONFIG_PATH/.."

if [ "$1" == "core" ] && [ "$2" == "start" ]; then
  start_core
  exit 0
fi

if [ "$1" == "core" ] && [ "$2" == "destroy" ]; then
  destroy_core
  exit 0
fi

execute_core "$@"
